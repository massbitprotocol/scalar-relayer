use ethcontract::common::hash::keccak256;
use ethers::prelude::*;
use ethers::{contract::Contract, types::transaction::eip2718::TypedTransaction};
use hex::FromHex;
use k256::{
    ecdsa::{SigningKey, VerifyingKey},
    schnorr::signature::Verifier,
    SecretKey,
};
use scalar_relayer::{abis::ScalarGateway, OWNER_PRIVATE_KEY};
use std::sync::Arc;
use tracing::{info, Level};
use web3::ethabi::Token;
fn set_up_logs() {
    let subscriber = tracing_subscriber::fmt()
        //.with_max_level(Level::DEBUG)
        .with_max_level(Level::INFO)
        .finish();
    tracing::subscriber::set_global_default(subscriber).expect("setting default subscriber failed");
}
//Successfully call to blockchain
const NODE_RAW_INPUT: &str = "0x02f90570052b8459682f008459682f1882cfe4941577875dd69f5276aeeabe3540b1f7c64690b3f880b9050409c5eabe000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001cecce1a2e9fd648d0228ef25a5f99d31a68c8c18fc370f893e091bc19e6f61470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000147472616e736665724f70657261746f72736869700000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000046a4cad7a08062f5a67c5bc4aa6d8c8816eff2470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002f467c697798c24788086e327b0bfd25952105fe000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000414aaeab55123571f2fae033d6d95b814975601c91470bdaf0c5c73c67cc22098d0b03cffdd2b0df7fb329a48bd80679ea17a78f992de05101f996afa169bbe0471c00000000000000000000000000000000000000000000000000000000000000c080a0820620097043ae490307faf29f95b61fc17484203da23d210ad5bfbb5c4616d3a07345dbd063b4f02d4a5f0c15c6cce1d44a0b53c52ad2f4294da7939dae5d2e08";
#[tokio::main]
async fn main() -> anyhow::Result<()> {
    set_up_logs();
    let execute_param ="000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001cecce1a2e9fd648d0228ef25a5f99d31a68c8c18fc370f893e091bc19e6f61470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000147472616e736665724f70657261746f72736869700000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000046a4cad7a08062f5a67c5bc4aa6d8c8816eff2470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002f467c697798c24788086e327b0bfd25952105fe000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000414aaeab55123571f2fae033d6d95b814975601c91470bdaf0c5c73c67cc22098d0b03cffdd2b0df7fb329a48bd80679ea17a78f992de05101f996afa169bbe0471c00000000000000000000000000000000000000000000000000000000000000";
    let node_raw_data = "02f90570052b8459682f008459682f1882cfe4941577875dd69f5276aeeabe3540b1f7c64690b3f880b9050409c5eabe000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001cecce1a2e9fd648d0228ef25a5f99d31a68c8c18fc370f893e091bc19e6f61470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000147472616e736665724f70657261746f72736869700000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000046a4cad7a08062f5a67c5bc4aa6d8c8816eff2470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002f467c697798c24788086e327b0bfd25952105fe000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000414aaeab55123571f2fae033d6d95b814975601c91470bdaf0c5c73c67cc22098d0b03cffdd2b0df7fb329a48bd80679ea17a78f992de05101f996afa169bbe0471c00000000000000000000000000000000000000000000000000000000000000c0";

    let serialized_sig = "01a08d1cbdbc11eba3b08df739d4ffd219aa8443d27cb719ba8a624caa3301b33222a03bf397ad686ff1230165dfd58a2f808149498ebbde09c2a039d3bf594473c362";
    let rpc_url = "https://eth-goerli.g.alchemy.com/v2/DpCscOiv_evEPscGYARI3cOVeJ59CRo8";
    //let rpc_url = "https://ethereum-goerli.publicnode.com";
    // let rpc_url = "https://gateway.tenderly.co/public/goerli";
    // let rpc_url = "https://goerli.blockpi.network/v1/rpc/public";
    let contract_addr = "0x1577875Dd69f5276AEEabE3540b1F7c64690b3F8";
    let sender_addr = "0x2F467c697798c24788086e327B0BFD25952105fe";
    let sender_addr = sender_addr.parse::<Address>()?;
    let private_key = "84e4de1f09d9e593a9b229aacce492d4874605a0443241a78f2db48b51ce7da9";
    //let signer = OWNER_PRIVATE_KEY.parse::<LocalWallet>()?;
    let signer = private_key.parse::<LocalWallet>()?;
    info!(
        "Call from address {:?}",
        hex::encode(signer.address().as_bytes()).as_str()
    );
    assert_eq!(signer.address(), sender_addr);
    let signer_middleware = Provider::<Http>::try_from(rpc_url)?.with_signer(signer.clone());
    let signing_key = SigningKey::from_slice(hex::decode(private_key)?.as_slice())?;
    let verifying_key = signing_key.verifying_key();
    //info!("Default sender {:?}", provider.default_sender());
    let client = Arc::new(signer_middleware);
    let address: Address = contract_addr.parse()?;
    let contract = ScalarGateway::new(address.clone(), client.clone());
    let abi = contract.abi();
    let payload = hex::decode(execute_param)?;
    info!(
        "Payload  in 0x{} with length {}",
        execute_param,
        payload.len()
    );
    info!("Payload out 0x{}", hex::encode(&payload));
    let params = Bytes::from_hex(execute_param)?;
    info!("Params {:?}", &params);
    let mut contract_call = contract.execute(params);
    //info!("Block {:?}", &contract_call.block);
    let filled_tx = client
        .fill_transaction(&mut contract_call.tx, contract_call.block.clone())
        .await;
    info!("Filled transaction {:?}", &contract_call.tx);
    let raw_data = contract_call.tx.rlp();
    info!("Serialized {:?}", hex::encode(raw_data.as_ref()));
    let tx_hash = contract_call.tx.sighash();
    info!("tx_hash {:?}", hex::encode(tx_hash.as_bytes()));
    let tx_hash = keccak256(node_raw_data.as_bytes());
    let tx_hash = H256::from_slice(&tx_hash);
    info!("tx_hash {:?}", hex::encode(tx_hash));
    //let raw_data = Bytes::from_hex(node_raw_data)?;
    if let Ok(mut signature) = signer.sign_hash(tx_hash) {
        if signature
            .verify(
                RecoveryMessage::Data(raw_data.as_ref().to_vec()),
                sender_addr.clone(),
            )
            .is_ok()
        {
            //adjust signature for rlp
            info!("Signature {:?}", &signature);
            // adjust_signature(&contract_call.tx, &mut signature);
            // info!("Adjusted Signature {:?}", &signature);
            // let raw_params = contract_call.tx.rlp_signed(&signature);
            // info!("Raw params {:?}", &raw_params);
            //let raw_params = Bytes::from_hex(NODE_RAW_INPUT)?;
            // let res: Option<TransactionReceipt> =
            //     client.send_raw_transaction(raw_params).await?.await?;
            // info!("Call result {:?}", res);
        }
    }

    // if let Ok(signature) = signer.sign_transaction(&contract_call.tx).await {
    //     let verify = signature.verify(
    //         RecoveryMessage::Data(raw_data.as_ref().to_vec()),
    //         sender_addr,
    //     );
    //     info!("Verify {:?}", verify);
    //     info!("Signature {}", &signature);
    //     info!("Signature {:?}", &signature);

    //     // extracts the chainid from the signature v value based on EIP-155
    //     let raw_params = contract_call.tx.rlp_signed(&signature);
    //     info!("Raw params {:?}", &raw_params);
    //     // let node_raw_params = "02f90570052a8459682f008459682f1282cfe4941577875dd69f5276aeeabe3540b1f7c64690b3f880b9050409c5eabe000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001cecce1a2e9fd648d0228ef25a5f99d31a68c8c18fc370f893e091bc19e6f61470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000147472616e736665724f70657261746f72736869700000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000046a4cad7a08062f5a67c5bc4aa6d8c8816eff2470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002f467c697798c24788086e327b0bfd25952105fe000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000414aaeab55123571f2fae033d6d95b814975601c91470bdaf0c5c73c67cc22098d0b03cffdd2b0df7fb329a48bd80679ea17a78f992de05101f996afa169bbe0471c00000000000000000000000000000000000000000000000000000000000000c001a08d1cbdbc11eba3b08df739d4ffd219aa8443d27cb719ba8a624caa3301b33222a03bf397ad686ff1230165dfd58a2f808149498ebbde09c2a039d3bf594473c362";
    //     // info!("Raw params {}", &node_raw_params);
    //     // let node_raw_params = hex::decode(node_raw_params)?;
    //     // let node_raw_params = Bytes::from(node_raw_params);
    //     // info!("Raw params {:?}", &node_raw_params);
    //     // let res: Option<TransactionReceipt> =
    //     //     client.send_raw_transaction(raw_params).await?.await?;
    //     // info!("Call result {:?}", res);
    // }
    // if let Ok(gas) = contract_call.estimate_gas().await {
    //     contract_call = contract_call.gas(gas);
    // }

    // let calldata = contract_call.calldata();
    // info!("Call data {:?}", &calldata);
    // info!("TxTransaction {:?}", &contract_call.tx);
    // info!("Bytes {}", contract_call.tx.rlp());
    // let sighash = contract_call.tx.sighash();
    // info!("Sighash {}", sighash.to_string());
    // let signature = signer.sign_transaction(&contract_call.tx).await?;
    // info!("Signature {}", &signature);

    // let pending_tx = contract_call.send().await?;

    // match pending_tx.await {
    //     Ok(res) => {
    //         info!("Executed update tss address successfully {:?}", res);
    //     }
    //     Err(err) => {
    //         info!("Executed update tss address with error {:?}", err);
    //     }
    // }
    Ok(())
}

fn adjust_signature(tx: &TypedTransaction, signature: &mut Signature) {
    let chain_id = tx.chain_id().unwrap_or_else(U64::one).as_u64();
    match tx {
        TypedTransaction::Legacy(ref tx) => {}
        TypedTransaction::Eip2930(_) => {
            if signature.v >= 27 {
                //signature.v = signature.v + 35 + 2 * chain_id - 27;
                signature.v = signature.v - 27;
            }
        }
        TypedTransaction::Eip1559(_) => {
            if signature.v >= 27 {
                //signature.v = signature.v + 35 + 2 * chain_id - 27;
                signature.v = signature.v - 27;
            }
        }
        #[cfg(feature = "optimism")]
        TypedTransaction::OptimismDeposited(inner) => {
            if signature.v >= 27 {
                //signature.v = signature.v + 35 + 2 * chain_id - 27;
                signature.v = signature.v - 27;
            }
        }
    };
}

//"02f90570012b84b2d05e0084b2d05e1282cfe4941577875dd69f5276aeeabe3540b1f7c64690b3f880b9050409c5eabe000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001cecce1a2e9fd648d0228ef25a5f99d31a68c8c18fc370f893e091bc19e6f61470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000147472616e736665724f70657261746f72736869700000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000046a4cad7a08062f5a67c5bc4aa6d8c8816eff2470000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002f467c697798c24788086e327b0bfd25952105fe000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000414aaeab55123571f2fae033d6d95b814975601c91470bdaf0c5c73c67cc22098d0b03cffdd2b0df7fb329a48bd80679ea17a78f992de05101f996afa169bbe0471c00000000000000000000000000000000000000000000000000000000000000c0"
